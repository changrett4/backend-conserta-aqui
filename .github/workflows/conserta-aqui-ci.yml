name: CI Backend Conserta Aqui
run-name: ${{ github.actor }} is running a github actions
on:
  push:
    branches:
      - main

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/backend-conserta-aqui
jobs:
  create_env_file:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Make envfile
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
        run: |
          echo "DB_HOST=${DB_HOST}" >> .env
          echo "DB_NAME=${DB_NAME}" >> .env
          echo "DB_PORT=${DB_PORT}" >> .env
          echo "DB_PASSWORD=${DB_PASSWORD}" >> .env
          echo "DB_USERNAME=${DB_USERNAME}" >> .env

      - name: test env
        run: cat .env

      - name: Upload .env file
        uses: actions/upload-artifact@v4
        with:
          name: env
          path: .env

  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: create_env_file
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      - name: download env file
        uses: actions/download-artifact@v4
        with:
          name: env

      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/backend-conserta-aqui
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  deploy_container_oci:
    runs-on: ubuntu-latest
    name: Run container in oci
    needs: push_to_registry

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup SSH
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        SSH_KEY_PASSWORD: ${{ secrets.SSH_KEY_PASS }}
      run: |
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        echo -e "Host *\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
        chmod 600 ~/.ssh/id_rsa
        ssh-keygen -p -P "$SSH_KEY_PASSWORD" -N "" -f ~/.ssh/id_rsa

    - name: Prepare script with secrets
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        APPLICATION_PORT: ${{ secrets.APPLICATION_PORT }}
      run: |
        sed -i 's/SECRET1_PLACEHOLDER/'"$DOCKER_USERNAME"'/g' deploy.sh
        sed -i 's/SECRET2_PLACEHOLDER/'"$DOCKER_PASSWORD"'/g' deploy.sh
        sed -i 's/SECRET3_PLACEHOLDER/'"$APPLICATION_PORT"'/g' deploy.sh
        chmod +x deploy.sh

    - name: Copy script to remote server
      run: scp -o "StrictHostKeyChecking=no" deploy.sh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/home/opc/deploy.sh

    - name: Run script on remote server
      run: ssh -o "StrictHostKeyChecking=no" ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} 'bash /home/opc/deploy.sh'

    - name: Clean up
      run: rm deploy.sh